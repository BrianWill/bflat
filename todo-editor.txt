encapsulate textbuffer

encapsulate cursor / selection  ('Cursor'? 'CursorSelection', 'Pointer')


in gopherjs code: event handlers should unpack events and send only properly typed args to other functions

better scrolling while mouse dragging


cut

default to copy/cut the current line if no selection?

with multiple lines selected, shift-cmd-k should delete all of the lines

browse files from server (a file browsing page with links to open each file in its own editor page)
    for now, just use browser tabs for working with multiple files


shift-tab removes leading spaces from line (or lines if multiple selected)

when a selection is active, shift adds leading spaces to line(s) (multiple if multiple lines selected)

better scroll adjust behavior when deleting/replacing selection when scrolled at bottom of text

change cmd-u cmd-i hotkeys into pageup/pagedown, also bind alt-up and alt-down



draw scrollbar indicator of current scroll position



offscreen canvas buffers for smooth scrolling (use at least 3, and copy from these buffers to onscreen canvas)
    cursor is never rendered on off-screen bufffers, always rendered last on top of dispaly canvas




search and replace

undo/redo

multi-tabs


don't preventDefault for some browser hotkeys (reload?, new tab? ctrl-s should not print a character)



horizontal scroll

word wrapping

option to insert actual tab characters instead of spaces

support tab size other than 4 spaces


ctrl-A



prev/nextWhitespaceSkip should not skip past ( ) { } [ ]  ? desired behavior depends upon language mode


efficient text buffer using TextArea? (presumably it could avoid producing so much garbage as user types)
    native byte array? 

    function bin2String(array) {
        return String.fromCharCode.apply(String, array);
    }

    use views w/ buffers?


firefox: dom.events.async.clipboard must be enabled in about:config? or is that only for file:///
    chrome will ask for permission repeatedly for clipboard permission when viewing page via file:/// 
        (serving via localhost fixes problem)


LOL: https://www.w3.org/TR/2dcontext/#best-practices





bflat highlighting policy:

    put discoloration at start of any line that does NOT begin with an implicit paren
    
    hold alt to see all hidden parens (the hidden leading parens show up one spot to left of their actual 
        position so as to avoid having to shift the code)
    
    as long as you follow the rules for open parens and indentation, any end parens at ends of 
        lines with no matching open paren on same line can be stripped and then hidden end parens put 
        in all the appropriate places

given call to foo:

    (foo
        bar)

...we can add second argument by just typing:

    (foo
        bar)
        ack

...which gets corrected to:

    (foo
        bar
        ack)

...in other words, invariants about indentation and open parens with no match on same line determines automatic placement
    of the hidden end parens

    when your code doesn't follow the invariants, you get error symbol in gutter next to lines that don't comply

    the hidden parens get revealed when the cursor is right next to them
        (rather than the rest of the line shift over, special highlighting indicates the paren isn't shown in its actual position 
            and the spaces before it are missing one character) (perhaps show the floating dot symbol for each space so you can see 
            that the leftmost one juts out of the margin? or just visually compact the 4 spaces to take up 3 spaces instead of 4?)

    line with implicit paren that closes that paren at end AND has indented lines is a syntax ERROR
